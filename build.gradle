plugins {
    id 'java'
    id 'eclipse'
}

repositories {
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

configurations {
    jflexGeneration
}

dependencies {
    // jflex : generation de l'analyseur lexical
    jflexGeneration 'de.jflex:jflex:1.8.2'
}

// on rÃ©utilise la tache ant pour jflex
task jflex (group: 'build') {
    ext.source = fileTree ( 'src/main/jflex'){
        include "**/*.jflex"
        include "**/*.flex"
    }
    ext.destdir = file("${buildDir}/generated/sources/${name}/main/java")
    ext.noback = 'true'
    ext.verbose = 'on'
    ext.encoding = 'UTF-8'

    inputs.property('noback', jflex.noback)
    inputs.property('encoding', jflex.encoding)
    inputs.files(jflex.source)
    outputs.dir(jflex.destdir)
        
    ant.taskdef(name:'jflex', classpath:configurations.jflexGeneration.asPath,  classname:"jflex.anttask.JFlexTask")
    doLast {
        sourceSets.main.java.srcDir jflex.destdir
        source.each { File f -> 
            println "jflex source --> ${f}"
            ant.jflex(file:f, destdir:destdir, nobak:noback, verbose:verbose, encoding: encoding)
        }
    }
}

compileJava.dependsOn jflex
compileJava.options.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            sourceCompatibility = 1.8
            targetCompatibility = 1.8
            srcDir jflex
        }
    }
    test {
    }
}

jar {
    manifest {
        attributes  'Main-Class': 'testJFlex.MonAnalyseur1'
    }
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

// Integration avec eclipse
// Tache modifiant l'encodage par defaut du projet eclipse 
def eclipseResourceEncoding = tasks.register('eclipseResourceEncoding')
// encoding will be defined when eclipse task run
tasks.named('eclipse'){ dependsOn(eclipseResourceEncoding) }
// with eclipse run the task on "Refresh Gradle Project"
eclipse.synchronizationTasks(eclipseResourceEncoding)

// modification encodage par defaut du projet
eclipseResourceEncoding.configure {
    ext.outputFile = file('.settings/org.eclipse.core.resources.prefs')
    ext.projectEncoding = java.nio.charset.Charset.defaultCharset().toString()    
    inputs.property("file.encoding", projectEncoding)
    outputs.file(outputFile).withPropertyName('outputFile')

    doLast {
        Properties eclipseEncodingProperties = new Properties(Collections.singletonMap('eclipse.preferences.version','1'))
        if (outputFile.exists()) {
            outputFile.withInputStream { eclipseEncodingProperties.load(it) }
        }
        eclipseEncodingProperties.put('encoding/<project>', projectEncoding)
        outputFile.withOutputStream { eclipseEncodingProperties.store(it, 'generated by '+name) }
    }
}
